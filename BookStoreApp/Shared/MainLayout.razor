@using BookStoreApp.Services;

@using MudBlazor.Utilities;
@using System.Net.Http.Headers;
@using System.Security.Claims;
@inherits LayoutComponentBase
@inject MudThemeProvider _mudThemeProvider

<MudThemeProvider @ref="@_mudThemeProvider" Theme="@CurrentThemeProvider.Instance.MyCustomTheme" @bind-IsDarkMode="@_mudThemeProvider.IsDarkMode" />
<MudDialogProvider FullWidth="true"
                   MaxWidth="MaxWidth.ExtraSmall"
                   CloseButton="false"
                   DisableBackdropClick="true"
                   NoHeader="false"
                   Position="DialogPosition.Center"
                   CloseOnEscapeKey="true" />
<MudSnackbarProvider />

<style>
    .icon-color{
        color: @CurrentThemeProvider.Instance.Palette.TextPrimary;
    }
    .mud-skeleton{
        background-color: @CurrentThemeProvider.Instance.Palette.DarkLighten;
        border-radius: 5px;
    }

    .mud-appbar {
        background-color: transparent !important;
        backdrop-filter: blur(20px);
    }
</style>



<AuthorizeView>
    <Authorized>
    <MudLayout>
        <MudAppBar Elevation="0">
            <MudIconButton Class="icon-color" Icon="@Icons.Material.Filled.Menu" Color="Color.Default" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
                <MudText>@context.User.FindFirst(ClaimTypes.NameIdentifier).Value</MudText>
            <MudIconButton Class="icon-color" Icon="@modeIcon" OnClick="@ToggleDark" />
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Elevation="0" >
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">BookStoreApp</MudText>
            </MudDrawerHeader>
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
    </Authorized>
    </AuthorizeView>
    @code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private string modeIcon => _mudThemeProvider.IsDarkMode ? Icons.Filled.DarkMode : Icons.Filled.LightMode;
    private void ToggleDark()  {
        _mudThemeProvider.IsDarkMode = !_mudThemeProvider.IsDarkMode;
        CurrentThemeProvider.Instance.UpdateMode(_mudThemeProvider.IsDarkMode);
    }
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    protected async override Task OnInitializedAsync()
    {
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            
            NavigationManager.NavigateTo("/admin/login");
        }else
        {
            
        Console.WriteLine("user is authenticated.");
        }
    }
    protected override void OnInitialized()
    {
        CurrentThemeProvider.Instance.Initialize(_mudThemeProvider.IsDarkMode);
        CurrentThemeProvider.Instance.ThemeChanged += HandleThemeChanged;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
       
        if (firstRender)
        {
            _mudThemeProvider.IsDarkMode = await _mudThemeProvider.GetSystemPreference();
            CurrentThemeProvider.Instance.UpdateMode(_mudThemeProvider.IsDarkMode);
        }
    }
    public void HandleThemeChanged(object sender, EventArgs e)
    {
        StateHasChanged();
    }

}