



<style>
    .mud-paper {
        background-color: @CurrentThemeProvider.Instance.Palette.DarkLighten;
    }

    .mud-input-label {
        background-color: @CurrentThemeProvider.Instance.Palette.DarkLighten;
        color: @CurrentThemeProvider.Instance.Palette.TextPrimary.SetAlpha(150) !important;
    }

    .mud-input-helper-text {
        color: @CurrentThemeProvider.Instance.Palette.TextPrimary.SetAlpha(100) !important;
    }

    .mud-overlay-content {
        height: 80%;
    }

    .mud-overlay {
        overflow-y: scroll;
    }

    .mud-overlay-scrim {
        height: 120% !important;
    }
    #mud-snackbar-container {
        z-index: 999999 !important;
    }

</style>

@if (book == null)
{
    <style>
        .mud-overlay-content {
            display: flex;
            justify-content: center;
        }

    </style>
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />

}
else
{


    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard Class="card-background">
            <MudCardHeader Class="pa-2">
                <MudText Typo="Typo.h5"> Create new book</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudTextField Label="Book Title" Variant="Variant.Outlined" HelperText="Max 20 characters"
                          @bind-Value="model.Title" For="@(() => model.Title)" />
                <MudTextField Label="Book Description" Variant="Variant.Outlined" HelperText="Max 300 characters"
                          @bind-Value="model.Description" For="@(() => model.Description)" Lines="3" />
                <MudNumericField @bind-Value="model.Price" For="@(() => model.Price)" Label="Book Price" Format="F1" HelperText="Min 0.0" Min="0" Variant="Variant.Outlined" />
                <MudTextField Format="yyyy-MM-dd" Label="Edition Date" @bind-Value="model.EditionDate" For="@(() => model.EditionDate)" InputType="InputType.Date" Variant="Variant.Outlined" />
                <br />
                @if (authors != null)
                {
                    <MudSelect Label="Author" @bind-Value="model.Author" For="@(() => model.Author)" Variant="Variant.Outlined" ToStringFunc="@convertFunc">
                        @foreach (var author in authors)
                        {
                            <MudSelectItem Value="@author" />
                        }
                    </MudSelect>
                }
                else
                {
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                }

                <br />
                <div Class="d-flex justify-space-between flex-grow-1 gap-4">
                    <MudFileUpload T="IBrowserFile" Accept=".jpg , png" FilesChanged="UploadCoverFile" MaximumFileCount="1">
                        <ButtonTemplate Context="selectFileContext">
                            <MudButton HtmlTag="label"
                                   Variant="Variant.Outlined"
                                   Color="coverBackgroundColor"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@selectFileContext">
                                @selectCoverFileText
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                    <MudFileUpload T="IBrowserFile" Accept=".pdf" FilesChanged="UploadDocumentFile" MaximumFileCount="1">
                        <ButtonTemplate Context="selectFileContext">
                            <MudButton HtmlTag="label"
                                   Variant="Variant.Outlined"
                                   Color="documentBackgroundColor"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@selectFileContext">
                                @selectDocumentFileText
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                </div>
            </MudCardContent>
            <MudCardActions>
                <MudSpacer />
                <MudButton OnClick="OnCancelClick" Variant="Variant.Filled" Color="Color.Error" Class="ml-auto mr-4">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Update</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
    <br />
}
@code {
    [Parameter]
    public EventCallback OnCancelClick { get; set; }
    [Parameter]
    public Action<AdminUpdateBookFormViewModel> OnValidFormSubmit { get; set; }
    [Parameter]
    public string Id { get; set; }
    private AdminAuthorViewModel[]? authors;
    private AdminBookViewModel book;

    protected override async Task OnInitializedAsync()
    {
        authors = await Http.GetFromJsonAsync<AdminAuthorViewModel[]>("api/Author/GetAuthors");
        book = await Http.GetFromJsonAsync<AdminBookViewModel>($"api/Book/GetBookDetails/{Id}");
        model = new AdminBookFormViewModel()
        {
                Title = book.Title,
                Description = book.Description,
                Price = book.Price,
                EditionDate = book.EditionDate,
                Author =new  AdminAuthorViewModel(){
                Id = book.Author.Id,
                Name = book.Author.Name,
                Description = book.Author.Description,
            }
        };
        StateHasChanged();
    }

    private string selectDocumentFileText = "Select Document File";
    private string selectCoverFileText = "Select Cover File";
    AdminBookFormViewModel model = new AdminBookFormViewModel();


    private Func<AdminAuthorViewModel, string> convertFunc = author => author?.Name;

    private void OnValidSubmit(EditContext context)
    {
        var data = new AdminUpdateBookFormViewModel()
            {
                Id = Id,
                Title = model.Title,
                Description = model.Description,
                EditionDate = model.EditionDate,
                Price = model.Price,
                Image = coverFile,
                Document = documentFile,
                AuthorId = model.Author.Id
            };
        OnValidFormSubmit(data);
        StateHasChanged();
    }

    private Color coverBackgroundColor = Color.Secondary;
    private Color documentBackgroundColor = Color.Secondary;

    IBrowserFile? coverFile;
    IBrowserFile? documentFile;
    private long maxCoverFileSize = 2 * 1024 * 1024;
    private long maxDocumentFileSize = 200 * 1024 * 1024;
    private void UploadCoverFile(IBrowserFile file)
    {
        var extention = file.Name.Split('.')[1];
        string[] avialableExtentions = new string[] { "jpg", "png" };
        if (avialableExtentions.Contains(extention))
        {
            if (file.Size > maxCoverFileSize)
            {
                Snackbar.Add("The book cover size should not be greater than 2Mo.", Severity.Error);
            }
            else
            {
                selectCoverFileText = file.Name;
                coverFile = file;
                StateHasChanged();
            }
        }
        else
        {
            Snackbar.Add("The book cover should be an image ", Severity.Error);
        }

    }
    private void UploadDocumentFile(IBrowserFile file)
    {
        var extention = file.Name.Split('.')[1];
        string[] avialableExtentions = new string[] { "pdf" };
        if (avialableExtentions.Contains(extention))
        {
            if (file.Size > maxDocumentFileSize)
            {
                Snackbar.Add("The book document size should not be greater than 200Mo.", Severity.Error);
            }
            else
            {
                selectDocumentFileText = file.Name;
                documentFile = file;
                Console.WriteLine(selectDocumentFileText);
                StateHasChanged();
            }

        }
        else
        {
            Snackbar.Add("The book document should be a pdf. ", Severity.Error);
        }

    }

 




}
